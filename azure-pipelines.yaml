trigger:
  - dev
  - master

variables:
  - name: major
    value: 0
  - name: minor
    value: 7
  - name: micro
    value: 0
  - name: DotNet3Version
    value: 3.1.302
  - name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
    value: true
  - name: DOTNET_CLI_TELEMETRY_OPTOUT
    value: 1
  - group: PackageSigningSecrets

name: $(major).$(minor).$(micro)-$(Rev:r)

jobs:
  - job: Build
    pool:
      vmImage: windows-latest
    steps:
      - task: UseDotNet@2
        displayName: Prep DotNet 3
        inputs:
          packageType: sdk
          version: $(DotNet3Version)
      - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
        displayName: Prep SonarCloud
        inputs:
          SonarCloud: SonarCloud
          organization: steeltoeoss
          projectKey: InitializrApi
          extraProperties: |
              sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)\**\*opencover.xml
              sonar.cs.vstest.reportsPaths=$(Agent.TempDirectory)\*.trx
              sonar.coverage.exclusions=**\*Test*\**\*
      - task: CloudFoundryCLIInstall@0
        displayName: Prep Cloud Foundry CLI
        inputs:
          cfVersion: 6.51.0
      - task: DotNetCoreCLI@2
        displayName: DotNet Restore
        inputs:
          command: restore
      - task: DotNetCoreCLI@2
        displayName: DotNet Build
        inputs:
          command: build
          arguments: --no-restore /p:TreatWarningsAsErrors=True
      - task: DotNetCoreCLI@2
        displayName: DotNet Test
        inputs:
          command: test
          arguments: --no-build /p:CollectCoverage=true /p:CoverletOutputFormat="opencover"
      - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
        displayName: Sonar Analyze
      - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
        displayName: Sonar Publish
      - task: DotNetCoreCLI@2
        displayName: DotNet Pack
        inputs:
          command: pack
          arguments: --no-build
        condition:
          and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')))
      - task: Powershell@2
        displayName: Sign Nugets
        inputs:
          filePath: sign\SignPackages.ps1
        env:
          ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory)
          SignClientUser: $(SignClientUser)
          SignClientSecret: $(SignClientSecret)
        condition:
          and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')))
      - task: PublishBuildArtifacts@1
        displayName: Publish NuGets
        inputs:
          pathToPublish: $(Build.ArtifactStagingDirectory)
          artifactName: Packages
          publishLocation: Container
        condition:
          and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')))
      - task: DotNetCoreCLI@2
        displayName: DotNet Publish
        inputs:
          command: publish
          arguments: --no-build
          zipAfterPublish: false
        condition:
          and(succeeded(), not(eq(variables['build.reason'], 'PullRequest')))
      - task: CloudFoundry@1
        displayName: Deploy Development
        inputs:
          cfEndpoint: PCFone
          skipSSLValidation: true
          org: group-steeltoe
          space: development
          deploymentOptions: manifest
          cfManifest: deploy/cloud-foundry/manifest-Development.yaml
        condition:
          and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'), not(eq(variables['build.reason'], 'PullRequest')))
      - task: CloudFoundry@1
        displayName: Deploy Staging
        inputs:
          cfEndpoint: PCFone
          skipSSLValidation: true
          org: group-steeltoe
          space: staging
          deploymentOptions: manifest
          cfManifest: deploy/cloud-foundry/manifest-Staging.yaml
        condition:
          and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), not(eq(variables['build.reason'], 'PullRequest')))
